{
    "swagger": "2.0",
    "info": {
        "title": "SCD_16_09",
        "description": "\n\n### A RESTful API built for SCD_16_09\n\n#### Author\nPedro Diogo - pedrodiogoum@gmail.com\n\n#### Repository\nhttps://github.com/PedroMD/scd-16-09\n",
        "version": "1.0.0"
    },
    "host": "scd-16-09.herokuapp.com",
    "schemes": [
        "http", "https"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/parameters": {
            "get": {
                "summary": "GET all Parameters",
                "description": "This request fetches all Parameters, responding with an array of Parameters objects.\n",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "description": "Filter by Parameters with this name",
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "units",
                        "in": "query",
                        "description": "Filter by Parameters with this units",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Parameters"
                ],
                "responses": {
                    "200": {
                        "description": "An array of Parameters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "/definitions/parameters.json"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "DELETES all Parameters (disabled from external requests)",
                "description": "This request deletes all Parameters.\n\n** NOTES **\n\n* Currently disabled for external requests (only the API itself can issue this query, or our unit-testing suite)\n",
                "tags": [
                    "Parameters"
                ],
                "responses": {
                    "200": {
                        "description": "An array of all deleted Parameters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "/definitions/parameters.json"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates one or more Parameters",
                "description": "A POST to this endpoint will create on or more Parameters. If a single object is sent, one single Parameter is created; if an array of Parameters objects is sent, N Parameters are created. \n\nResponse is either an Object or Array, depending on the incoming data.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Parameter object or array of Parameters objects",
                        "required": true,
                        "schema": {
                            "$ref": "/definitions/parameters.json"
                        }
                    }
                ],
                "tags": [
                    "Parameters"
                ],
                "responses": {
                    "201": {
                        "description": "The created Parameter object or array of Parameters objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Parameters"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/parameters/{parameterId}": {
            "get": {
                "summary": "GET a single Parameter",
                "description": "Fetches a single Parameter, by its Id. Returns a single Parameter object.\n",
                "parameters": [
                    {
                        "name": "parameterId",
                        "in": "path",
                        "description": "The ID of the Parameter to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Parameters"
                ],
                "responses": {
                    "200": {
                        "description": "One single Parameter object",
                        "schema": {
                            "$ref": "#/definitions/Parameters"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates a single Parameter",
                "description": "A PUT request to a known resource always yields in a *fully* updated resource. This means that the incoming data will completely replace all of this resource's content.\n",
                "parameters": [
                    {
                        "name": "parameterId",
                        "in": "path",
                        "description": "The ID of the Parameter to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Parameter object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Parameters"
                        }
                    }
                ],
                "tags": [
                    "Parameters"
                ],
                "responses": {
                    "200": {
                        "description": "One single Parameter object",
                        "schema": {
                            "$ref": "#/definitions/Paramaters"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Partially updates a single Parameter",
                "description": "A PATCH request to a known resource always yields in a *partially* updated resource. This means that the incoming data will be merged with the existing resource's content.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Parameter object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Parameters"
                        }
                    }
                ],
                "tags": [
                    "Parameters"
                ],
                "responses": {
                    "200": {
                        "description": "One single Parameter object",
                        "schema": {
                            "$ref": "#/definitions/Paramaters"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a single Parameter (hard delete)",
                "description": "A DELETE request to a known Parameter completely deletes the resource.\n\n**NOTES**\n\n* As we are populating the parameterId when doing *GET /parameters/{parameterId}/events*, \na DELETE to a known Parameter resource always deletes every **event** where *parameterId* matches\n",
                "parameters": [
                    {
                        "name": "parameterId",
                        "in": "path",
                        "description": "The ID of the Parameter to be deleted.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Parameters"
                ],
                "responses": {
                    "200": {
                        "description": "The deleted Parameter object",
                        "schema": {
                            "$ref": "/#/definitions/Paramaters"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/parameters/{parameterId}/events": {
            "get": {
                "summary": "GET all events of a single Parameter",
                "description": "Fetches all events whose *parameterId* matches **parameterId**.\n\nThe result is an object of specifically formated data (see response).\n",
                "parameters": [
                    {
                        "name": "parameterId",
                        "in": "path",
                        "description": "The ID of the Parameter to be queried.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Parameters"
                ],
                "responses": {
                    "200": {
                        "description": "One single formated object",
                        "schema": {
                            "$ref": "/definitions/parametersEvents"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes all events with a matching Parameter Id",
                "description": "Deletes all events whose *parameterId* matches **parameterId**.\n",
                "parameters": [
                    {
                        "name": "parameterId",
                        "in": "path",
                        "description": "The ID of the Parameter to be queried.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Parameters"
                ],
                "responses": {
                    "200": {
                        "description": "Array with all deleted Events objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Events"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "summary": "GET all Events",
                "description": "This request fetches all Events, responding with an array of Events objects.\n",
                "parameters": [
                    {
                        "name": "value",
                        "in": "query",
                        "required": false,
                        "description": "Filter by Events with selected Value",
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "paramId",
                        "in": "query",
                        "description": "Filter by Events with the selected paramId",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Events"
                ],
                "responses": {
                    "200": {
                        "description": "An array of Events",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Events"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "DELETES all Events (disabled from external requests)",
                "description": "This request deletes all Events.\n\n** NOTES **\n\n* Currently disabled for external requests (only the API itself can issue this query, or our unit-testing suite)\n",
                "tags": [
                    "Events"
                ],
                "responses": {
                    "200": {
                        "description": "An array of all deleted Events",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Events"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates one or more Events",
                "description": "A POST to this endpoint will create on or more Events. If a single object is sent, one single Event is created; if an array of Events objects is sent, N Events are created. \n\nResponse is either an Object or Array, depending on the incoming data.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Event object or array of Events objects",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Events"
                        }
                    }
                ],
                "tags": [
                    "Events"
                ],
                "responses": {
                    "201": {
                        "description": "The created Event object or array of Events objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Events"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/events/{eventId}": {
            "get": {
                "summary": "GET a single Event",
                "description": "Fetches a single Event, by its Id. Returns a single Event object.\n",
                "parameters": [
                    {
                        "name": "parameterId",
                        "in": "path",
                        "description": "The ID of the Event to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Events"
                ],
                "responses": {
                    "200": {
                        "description": "One single Event object",
                        "schema": {
                            "$ref": "#/definitions/Events"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates a single Event",
                "description": "A PUT request to a known resource always yields in a *fully* updated resource. This means that the incoming data will completely replace all of this resource's content.\n",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "The ID of the Event to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Event object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Events"
                        }
                    }
                ],
                "tags": [
                    "Events"
                ],
                "responses": {
                    "200": {
                        "description": "One single Event object",
                        "schema": {
                            "$ref": "#/definitions/Events"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Partially updates a single Event",
                "description": "A PATCH request to a known resource always yields in a *partially* updated resource. This means that the incoming data will be merged with the existing resource's content.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Event object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Events"
                        }
                    },
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "The ID of the Event to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Events"
                ],
                "responses": {
                    "200": {
                        "description": "One single Event object",
                        "schema": {
                            "$ref": "#/definitions/Events"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a single Event (hard delete)",
                "description": "A DELETE request to a known Event completely deletes the resource.\n\n**NOTES**\n\n* As we are populating the *eventId* when doing *GET /users/{userId/alerts/*, \na DELETE to a known Event resource always deletes every **Alert** where *eventId* matches\n",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "The ID of the Event to be deleted.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Events"
                ],
                "responses": {
                    "200": {
                        "description": "The deleted Event object",
                        "schema": {
                            "$ref": "/#/definitions/Events"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/rules": {
            "get": {
                "summary": "GET all Rules",
                "description": "This request fetches all Rules, responding with an array of Rules objects.\n",
                "parameters": [
                    {
                        "name": "paramId",
                        "in": "query",
                        "description": "Filter by Rules with selected paramId",
                        "type": "string",
                        "required": false,
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "description": "Filter by Rules with the selected userId",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "threshold",
                        "in": "query",
                        "description": "Filter by Rules with the selected threshold",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Rules"
                ],
                "responses": {
                    "200": {
                        "description": "An array of Rules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "/definitions/rules"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "DELETES all Rules (disabled from external requests)",
                "description": "This request deletes all Rules.\n\n** NOTES **\n\n* Currently disabled for external requests (only the API itself can issue this query, or our unit-testing suite)\n",
                "tags": [
                    "Rules"
                ],
                "responses": {
                    "200": {
                        "description": "An array of all deleted Rules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "/definitions/rules"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates one or more Rules",
                "description": "A POST to this endpoint will create on or more Rules. If a single object is sent, one single Rule is created; if an array of Rules objects is sent, N Rules are created. \n\nResponse is either an Object or Array, depending on the incoming data.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Rule object or array of Rules objects",
                        "required": true,
                        "schema": {
                            "$ref": "/definitions/rules"
                        }
                    }
                ],
                "tags": [
                    "Rules"
                ],
                "responses": {
                    "201": {
                        "description": "The created Rule object or array of Rules objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "/definitions/rules"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/rules/{ruleId}": {
            "get": {
                "summary": "GET a single Rule",
                "description": "Fetches a single Rule, by its Id. Returns a single Rule object.\n",
                "parameters": [
                    {
                        "name": "ruleId",
                        "in": "path",
                        "description": "The ID of the Rule to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Rules"
                ],
                "responses": {
                    "200": {
                        "description": "One single Rule object",
                        "schema": {
                            "$ref": "/definitions/rules"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates a single Rule",
                "description": "A PUT request to a known resource always yields in a *fully* updated resource. This means that the incoming data will completely replace all of this resource's content.\n",
                "parameters": [
                    {
                        "name": "ruleId",
                        "in": "path",
                        "description": "The ID of the Rule to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Rule object",
                        "required": true,
                        "schema": {
                            "$ref": "/definitions/rules"
                        }
                    }
                ],
                "tags": [
                    "Rules"
                ],
                "responses": {
                    "200": {
                        "description": "One single Rule object",
                        "schema": {
                            "$ref": "/definitions/rules"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Partially updates a single Rule",
                "description": "A PATCH request to a known resource always yields in a *partially* updated resource. This means that the incoming data will be merged with the existing resource's content.\n",
                "parameters": [
                    {
                        "name": "ruleId",
                        "in": "path",
                        "description": "The ID of the Rule to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Rule object",
                        "required": true,
                        "schema": {
                            "$ref": "/definitions/rules"
                        }
                    }
                ],
                "tags": [
                    "Rules"
                ],
                "responses": {
                    "200": {
                        "description": "One single Rule object",
                        "schema": {
                            "$ref": "/definitions/rules"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a single Rule (hard delete)",
                "description": "A DELETE request to a known Rule completely deletes the resource.\n\n**NOTES**\n\n* As we are populating the *RuleId* when doing *GET /users/{userId/alerts/*, \na DELETE to a known Rule resource always deletes every **Alert** where *RuleId* matches\n\n\n* When a rule is deleted, its *id* are also be removed from the relevant *user's *rulesIds[]*. \nThis is needed as we use this *rulesIds[]* to determine which rules are valid, at the moment, for \na given user \n(when GET */users/{userId/alerts/* or */users/{userId}/alerts/*, for instance)\n",
                "parameters": [
                    {
                        "name": "RuleId",
                        "in": "path",
                        "description": "The ID of the Rule to be deleted.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Rules"
                ],
                "responses": {
                    "200": {
                        "description": "The deleted Rule object",
                        "schema": {
                            "$ref": "//definitions/rules"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "summary": "GET all Users",
                "description": "This request fetches all Users, responding with an array of Users objects.\n",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Filter by Users with selected email",
                        "type": "string",
                        "required": false,
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "An array of Users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Users"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "DELETES all Users (hard delete)",
                "description": "This request deletes all Users.\n",
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "An array of all deleted Users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Users"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates one or more Users",
                "description": "A POST to this endpoint will create on or more Users. If a single object is sent, one single User is created; if an array of Users objects is sent, N Users are created. \n\nResponse is either an Object or Array, depending on the incoming data.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "User object or array of Users objects",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "201": {
                        "description": "The created User object or array of Users objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Users"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "summary": "GET a single User",
                "description": "Fetches a single User, by its Id. Returns a single User object.\n",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The ID of the User to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "One single User object",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates a single User",
                "description": "A PUT request to a known resource always yields in a *fully* updated resource. This means that the incoming data will completely replace all of this resource's content.\n",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The ID of the User to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "User object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "One single User object",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Partially updates a single User",
                "description": "A PATCH request to a known resource always yields in a *partially* updated resource. This means that the incoming data will be merged with the existing resource's content.\n",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The ID of the User to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "User object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "One single User object",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a single User (hard delete)",
                "description": "A DELETE request to a known User completely deletes the resource.\n",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The ID of the User to be deleted.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "The deleted User object",
                        "schema": {
                            "$ref": "/#/definitions/Users"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/users/{userId}/rules": {
            "get": {
                "summary": "GET all rules of a known User",
                "description": "Fetches all rules whose userId matches **userId**.\n\nThe result is an array of rules.\n",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The ID of the User to be queried.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "An array of Rules objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "/definitions/rules"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates one or more Rules and adds to a User",
                "description": "A POST to this endpoint will create on or more Rules. If a single object is sent, one single Rule is created; if an array of Rules objects is sent, N Rules are created. \n\nResponse is either an Object or Array, depending on the incoming data.\n\nThe resulting *id* will be **pushed** to the relevant user's (*userId* in path) array of rules (*rulesIds[]*)\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Rule object or array of Rules objects",
                        "required": true,
                        "schema": {
                            "$ref": "/definitions/rules"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "201": {
                        "description": "The created Rule object or array of Rules objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "/definitions/rules"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "put": {
                "summary": "Creates one or more Rules and updates User",
                "description": "A POST to this endpoint will create on or more Rules. If a single object is sent, one single Rule is created; if an array of Rules objects is sent, N Rules are created. \n\nResponse is either an Object or Array, depending on the incoming data.\n\n** NOTES **\n\n* NOT the same as a POST */users/{userId}/rules* because it **overrides** any existing rules, rather than just adding.\n\nThe resulting *id(s)* will be **set** on that relevant user's (*userId* in path) array of rules (*rulesIds[]*)\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Rule object or array of Rules objects",
                        "required": true,
                        "schema": {
                            "$ref": "/definitions/rules"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "The created Rule object or array of Rules objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "/definitions/rules"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/users/{userId}/alerts": {
            "get": {
                "summary": "GET all triggered alerts of a known User",
                "description": "Fetches all alerts where userId matches **userId**.\n\nThe result is an array of alerts, sorted by Parameters (see below).\n",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The ID of the User to be queried.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users",
                    "Alerts"
                ],
                "responses": {
                    "200": {
                        "description": "An array of formated Alerts, sorted by Parameters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "/definitions/alertsParams.json"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/alerts": {
            "get": {
                "summary": "GET all Alerts",
                "description": "This request fetches all Alerts, responding with an array of Alerts objects.\n",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "query",
                        "required": false,
                        "description": "Filter by Alerts with this userId",
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "ruleId",
                        "in": "query",
                        "description": "Filter by Alerts with this ruleId",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "paramId",
                        "in": "query",
                        "description": "Filter by Alerts with this paramId",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "eventId",
                        "in": "query",
                        "description": "Filter by Alerts with this eventId",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "timestamp",
                        "in": "query",
                        "description": "Filter by Alerts with this timestamp (JS string date format)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Alerts"
                ],
                "responses": {
                    "200": {
                        "description": "An array of Alerts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alerts"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "DELETES all Alerts (disabled from external requests)",
                "description": "This request deletes all Alerts.\n\n** NOTES **\n\n* Currently disabled for external requests (only the API itself can issue this query, or our unit-testing suite)\n",
                "tags": [
                    "Alerts"
                ],
                "responses": {
                    "200": {
                        "description": "An array of all deleted Alerts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alerts"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates one or more Alerts (disabled from external requests)",
                "description": "A POST to this endpoint will create on or more Alerts. If a single object is sent, one single Alert is created; if an array of Alerts objects is sent, N Alerts are created. \n\nResponse is either an Object or Array, depending on the incoming data.\n\n** NOTES **\n\n* Currently disabled for external requests (only the API itself can issue this query, or our unit-testing suite). These are automatically created when an rule is triggered, so it should not be \nopen to external requests.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Alert object or array of Alerts objects",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alerts"
                        }
                    }
                ],
                "tags": [
                    "Alerts"
                ],
                "responses": {
                    "201": {
                        "description": "The created Alert object or array of Alerts objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alerts"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        },
        "/alerts/{alertId}": {
            "get": {
                "summary": "GET a single Alert",
                "description": "Fetches a single Alert, by its Id. Returns a single Alert object.\n",
                "parameters": [
                    {
                        "name": "alertId",
                        "in": "path",
                        "description": "The ID of the Alert to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Alerts"
                ],
                "responses": {
                    "200": {
                        "description": "One single Alert object",
                        "schema": {
                            "$ref": "#/definitions/Alerts"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates a single Alert (disabled from external requests)",
                "description": "A PUT request to a known resource always yields in a *fully* updated resource. This means that the incoming data will completely replace all of this resource's content.\n\n** NOTES **\n\n* Currently disabled for external requests (only the API itself can issue this query, or our unit-testing suite). \n\n* It is *not safe* to allow for an external PUT, as it could corrupt the automatically created reference ids (*userId*, *eventId*, *paramId*).\n",
                "parameters": [
                    {
                        "name": "alertId",
                        "in": "path",
                        "description": "The ID of the Alert to be fetched.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Alert object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alerts"
                        }
                    }
                ],
                "tags": [
                    "Alerts"
                ],
                "responses": {
                    "200": {
                        "description": "One single Alert object",
                        "schema": {
                            "$ref": "#/definitions/Paramaters"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Partially updates a single Alert (disabled from external requests)",
                "description": "A PATCH request to a known resource always yields in a *partially* updated resource. This means that the incoming data will be merged with the existing resource's content.\n\n  ** NOTES **\n  \n  * Currently disabled for external requests (only the API itself can issue this query, or our unit-testing suite). \n\n  * It is *not safe* to allow for an external PATCH, as it could corrupt the automatically created reference ids (*userId*, *eventId*, *paramId*).\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Alert object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alerts"
                        }
                    }
                ],
                "tags": [
                    "Alerts"
                ],
                "responses": {
                    "200": {
                        "description": "One single Alert object",
                        "schema": {
                            "$ref": "#/definitions/Paramaters"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a single Alert (hard delete) (disabled from external requests)",
                "description": "A DELETE request to a known Alert completely deletes the resource.\n\n**NOTES**\n\n* Although it would not compromise the behaviour of this API, it should not be open to external requests. These resources, even if not in use, are important to keep, for logging purposes.\n",
                "parameters": [
                    {
                        "name": "alertId",
                        "in": "path",
                        "description": "The ID of the Alert to be deleted.",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Alerts"
                ],
                "responses": {
                    "200": {
                        "description": "The deleted Alert object",
                        "schema": {
                            "$ref": "/definitions/paramaters.json"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "/definitions/error.json"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Events": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "description": "Unique ID generated by DB"
                },
                "value": {
                    "type": "integer",
                    "description": "Event value of a Parameter"
                },
                "paramId": {
                    "type": "string",
                    "description": "Reference to a single Parameter id"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date",
                    "description": "In date format (UTC Timezone). Automatically added whenever an Event is created."
                }
            }
        },
        "Rules": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "description": "Unique ID generated by DB"
                },
                "paramId": {
                    "type": "string",
                    "description": "Reference to a single Parameter id"
                },
                "userId": {
                    "type": "string",
                    "description": "Reference to a single User id"
                },
                "threshold": {
                    "type": "integer",
                    "description": "The defined threshold value for this rule. Any Event's value higher than this will result in a new Alert."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date",
                    "description": "In date format (UTC Timezone). Automatically added whenever a Rule is created."
                }
            }
        },
        "Alerts": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "description": "Unique ID generated by DB"
                },
                "ruleId": {
                    "type": "string",
                    "description": "Reference to a single Rule id"
                },
                "paramId": {
                    "type": "string",
                    "description": "Reference to a single Parameter id"
                },
                "userId": {
                    "type": "string",
                    "description": "Reference to a single User id"
                },
                "eventId": {
                    "type": "string",
                    "description": "Reference to a single Event id"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date",
                    "description": "In date format (UTC Timezone). Automatically added whenever an Alert is created."
                }
            }
        },
        "Parameters": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "description": "Unique ID generated by DB"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Parameter"
                },
                "units": {
                    "type": "string",
                    "description": "Parameter's units of measure"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date",
                    "description": "In date format (UTC Timezone). Automatically added whenever a Parameter is created."
                }
            }
        },
        "Users": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "description": "Unique ID generated by DB"
                },
                "email": {
                    "type": "string",
                    "description": "The unique email of a User"
                },
                "rulesIds": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "A list of Rules ids"
                    }
                },
                "createdAt": {
                    "type": "string",
                    "format": "date",
                    "description": "In date format (UTC Timezone). Automatically added whenever a User is created."
                },
                "password": {
                    "type": "string",
                    "description": "This user's password. Currently not in use."
                }
            }
        },
        "ParametersEvents": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the Parameter"
                },
                "units": {
                    "type": "string",
                    "description": "Parameter's units of measure"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                }
            }
        },
        "AlertsParams": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the Parameter"
                },
                "units": {
                    "type": "string",
                    "description": "Parameter's units of measure"
                },
                "threshold": {
                    "type": "integer",
                    "description": "Threshold value which has triggered these alerts"
                },
                "events": {
                    "type": "array",
                    "description": "Array containing all events whose value > threshold, for the particular Parameter",
                    "items": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                }
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP error code (https://docs.feathersjs.com/middleware/error-handling.html)"
                },
                "message": {
                    "type": "string",
                    "description": "The error message in a string format (https://docs.feathersjs.com/middleware/error-handling.html)"
                },
                "className": {
                    "type": "string",
                    "description": "A CSS class name that can be handy for styling errors based on the error type. (https://docs.feathersjs.com/middleware/error-handling.html)"
                },
                "data": {
                    "type": "object",
                    "description": "Object that may contain additional data (https://docs.feathersjs.com/middleware/error-handling.html)"
                },
                "errors": {
                    "type": "object",
                    "description": "Object that may contain additional info about the error (https://docs.feathersjs.com/middleware/error-handling.html)"
                }
            }
        }
    }
}
